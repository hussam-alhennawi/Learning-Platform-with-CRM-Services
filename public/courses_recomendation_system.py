# -*- coding: utf-8 -*-
"""Similarity-Based_AUG_4- Collaborative Filtering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bYCceaMMjnbqpLDvSCBpcdTqhmTGEHKA
"""

import pandas as pd
import numpy as np
import numpy.ma as ma
from scipy import sparse
from scipy.sparse import coo_matrix
from scipy.stats import iqr
from sklearn.metrics.pairwise import euclidean_distances
from sklearn.preprocessing import MinMaxScaler
import pickle
import math
from datetime import datetime as dt
import mysql.connector

"""## Get Data

###all the cousrses we have
"""

mydb = mysql.connector.connect(
  host="127.0.0.1",
  user="root",
  password="",
  database="laravel"
)

mycursor = mydb.cursor()

mycursor.execute("SELECT * FROM courses")

courses_data = mycursor.fetchall()

courses = pd.DataFrame(np.array(courses_data), columns=['course_id', 'category_id', 'lecture_id', 'title', 'description', 'level', 'skills', 'duration', 'cost', 'rate', 'image', 'created_at', 'updated_at']).drop(columns=['lecture_id', 'skills', 'description', 'created_at', 'updated_at', 'title', 'image'])
courses.head()
# print(courses)
"""###all the users we have"""

# users = pd.read_csv('C:\\Users\\Yazan\\Downloads\\users.csv', names=['user_id', 'first_name', 'middle_name', 'last_name', 'DOB', 'scientific_degree', 'email', 'email_verified_at', 'phone', 'address', 'gender', 'username', 'password', 'identity_check', 'active', 'blocked', 'remembered_token', 'image', 'created_at', 'updated_at']).drop(columns=['scientific_degree', 'first_name', 'middle_name', 'last_name', 'DOB', 'email', 'email_verified_at', 'phone', 'address', 'username', 'password', 'identity_check', 'remembered_token', 'image', 'created_at', 'updated_at'])
mycursor.execute("SELECT * FROM users")

users_data = mycursor.fetchall()

users = pd.DataFrame(np.array(users_data), columns=['user_id', 'first_name', 'middle_name', 'last_name', 'DOB', 'scientific_degree', 'email', 'email_verified_at', 'phone', 'address', 'gender', 'username', 'password', 'identity_check', 'active', 'blocked', 'remembered_token', 'image', 'created_at', 'updated_at']).drop(columns=['scientific_degree', 'first_name', 'middle_name', 'last_name', 'DOB', 'email', 'email_verified_at', 'phone', 'address', 'username', 'password', 'identity_check', 'remembered_token', 'image', 'created_at', 'updated_at'])
users.head()

# categories = pd.read_csv('C:\\Users\\Yazan\\Downloads\\categories.csv', columns=['category_id', 'parent_id', 'name', 'image', 'created_at', 'updated_at']).drop(columns=['parent_id', 'image', 'created_at', 'updated_at'])
mycursor.execute("SELECT * FROM categories")

categories_data = mycursor.fetchall()

categories = pd.DataFrame(np.array(categories_data), columns=['category_id', 'parent_id', 'name', 'image', 'created_at', 'updated_at']).drop(columns=['parent_id', 'image', 'created_at', 'updated_at'])
categories.head()

"""###all the student who have registered on courses"""

# course_student = pd.read_csv('C:\\Users\\Yazan\\Downloads\\course_student.csv', names=['id', 'course_id', 'student_id', 'rate', 'progress', 'created_at', 'updated_at']).drop(columns=['id', 'created_at', 'updated_at'])
mycursor.execute("SELECT * FROM course_student")

course_student_data = mycursor.fetchall()

course_student = pd.DataFrame(np.array(course_student_data), columns=['id', 'course_id', 'student_id', 'rate', 'progress', 'created_at', 'updated_at']).drop(columns=['id', 'created_at', 'updated_at'])
course_student

"""### pivot table which has all the courses , all the users , and an information about if yhis user register on this course"""

courses_pivot_table = pd.pivot_table(course_student, values='rate', index='student_id',  columns='course_id', aggfunc='first').reset_index().fillna(0)
courses_pivot_table

# course_reg = pd.read_csv('C:\\Users\\Yazan\\Downloads\\course_reg.csv', names=['course_id', 'student_id', 'payment_check', 'DATE', 'status', 'active', 'CREATED_AT', 'UPDATED_AT']).drop(columns=['DATE', 'CREATED_AT', 'UPDATED_AT'])
mycursor.execute("SELECT * FROM course_reg")

course_reg_data = mycursor.fetchall()

course_reg = pd.DataFrame(np.array(course_reg_data), columns=['id','course_id', 'student_id', 'payment_check', 'DATE', 'status', 'active', 'CREATED_AT', 'UPDATED_AT']).drop(columns=['id','DATE', 'CREATED_AT', 'UPDATED_AT'])
course_reg

"""### courses and categories so all the courses data"""

courses_full = categories.merge(courses, on='category_id')
courses_full

"""### merge all the user information with pivot table"""

students_data = users.merge(courses_pivot_table, left_on='user_id', right_on='student_id', how='left').fillna(0).drop(columns=['student_id'])
students_data

"""### convert male , femail into one_hot_encoded feature"""

students_data = pd.get_dummies(students_data)
students_data

"""### Indexing

Store students IDs and indices in matrix in a dictionary
Map each index to its respective student ID
"""

indices = {students_data.index[i]: students_data.iloc[i]['user_id'] for i in range(students_data.shape[0])}
indices

"""### delete user id colunm"""

students_data = students_data.drop(columns=['user_id'])
students_data

"""### Normalization

### data normalization(scaling) convert into range 0 to 1
"""

mms = MinMaxScaler()
students_data = mms.fit_transform(students_data.values)
students_data

"""## Distances Computation

### get Euclidean distances between each student and all other students and get 3 users with minimum distances for each student
"""

def get_mask(mat, k):
    # for max values, modify indexing in argosrt to be [:, -k:]
    # for min values, modify indexing in argsort to be [:, :k]
    
    mask = np.zeros(mat.shape, dtype=bool)
    mask[np.repeat(np.arange(len(mat)), k), mat.argsort(axis=1)[:, :k].flatten()] = 1
    return mask

k = 3

distances = euclidean_distances(students_data, students_data)
mask = get_mask(distances, k)
distances_masked_bin = ma.masked_array(distances, mask=~mask)
distances_masked_bin = distances_masked_bin.filled(0)

rows, columns = np.nonzero(distances_masked_bin)
values = distances_masked_bin[(rows, columns)]
values[values == -1] = 0

sim = pd.DataFrame.from_dict({
                            'Student': rows,
                            'Similar_Student': columns,
                            'Distance': values
                        })

"""### convert the distance to similarity"""

sim['Similarity'] = 1 - (sim['Distance'] / sim['Distance'].max())
sim = sim.drop(columns=['Distance'])
sim

sim = sim[sim['Similarity'] >= 0.5]

import plotly.express as px

px.box(sim, y='Similarity')

recommendations = pd.DataFrame(columns=['Student_ID', 'Course_ID'])

for i in range(sim.shape[0]):
    student_idx = indices[sim.iloc[i]['Student']]
    similar_student = indices[sim.iloc[i]['Similar_Student']]
    recommended_course = course_student[course_student['student_id'] == similar_student]['course_id'].values
    if recommended_course.shape[0] > 0:
        recommended_course = recommended_course[0]
        if recommended_course not in course_reg[course_reg['student_id'] == student_idx]['course_id'].values:
            recommendations = recommendations.append(pd.DataFrame.from_dict({'Student_ID': [student_idx], 'Course_ID': [recommended_course]}))

recommendations

recommendations.reset_index(drop=True).to_json('C:\\wamp64\\www\\myUniversity\\public\\reco.json', orient='records')
